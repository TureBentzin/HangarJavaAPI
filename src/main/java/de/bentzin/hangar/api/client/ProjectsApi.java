/*
 * Hangar API
 * This page describes the format for the current Hangar REST API as well as general usage guidelines.<br> Note that all routes **not** listed here should be considered **internal**, and can change at a moment's notice. **Do not use them**.  ## Authentication and Authorization There are two ways to consume the API: Authenticated or anonymous.  ### Anonymous When using anonymous authentication, you only have access to public information, but you don't need to worry about creating and storing an API key or handing JWTs.  ### Authenticated If you need access to non-public content or actions, you need to create and use API keys. These can be created by going to the API keys page via the profile dropdown or by going to your user page and clicking on the key icon.  API keys allow you to impersonate yourself, so they should be handled like passwords. **Do not share them with anyone else!**  #### Getting and Using a JWT Once you have an API key, you need to authenticate yourself: Send a `POST` request with your API key identifier to `/api/v1/authenticate?apiKey=yourKey`. The response will contain your JWT as well as an expiration time. Put this JWT into the `Authorization` header of every request and make sure to request a new JWT after the expiration time has passed.  Please also set a meaningful `User-Agent` header. This allows us to better identify loads and needs for potentially new endpoints.  ## Misc ### Date Formats Standard ISO types. Where possible, we use the [OpenAPI format modifier](https://swagger.io/docs/specification/data-models/data-types/#format).  ### Rate Limits and Caching The default rate limit is set at 20 requests every 5 seconds with an initial overdraft for extra leniency. Individual endpoints, such as version creation, may have stricter rate limiting.  If applicable, always cache responses. The Hangar API itself is cached by CloudFlare and internally.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bentzin.hangar.api.client;

import com.google.gson.reflect.TypeToken;
import de.bentzin.hangar.api.*;
import de.bentzin.hangar.api.model.*;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getProject
     * @param author The author of the project to return (required)
     * @param slug The slug of the project to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCall(String author, String slug, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}"
            .replaceAll("\\{" + "author" + "\\}", localVarApiClient.escapeString(author.toString()))
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectValidateBeforeCall(String author, String slug, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling getProject(Async)");
        }
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getProject(Async)");
        }
        

        okhttp3.Call localVarCall = getProjectCall(author, slug, _callback);
        return localVarCall;

    }

    /**
     * Returns info on a specific project
     * Returns info on a specific project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return (required)
     * @param slug The slug of the project to return (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public Project getProject(String author, String slug) throws ApiException {
        ApiResponse<Project> localVarResp = getProjectWithHttpInfo(author, slug);
        return localVarResp.getData();
    }

    /**
     * Returns info on a specific project
     * Returns info on a specific project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return (required)
     * @param slug The slug of the project to return (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getProjectWithHttpInfo(String author, String slug) throws ApiException {
        okhttp3.Call localVarCall = getProjectValidateBeforeCall(author, slug, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns info on a specific project (asynchronously)
     * Returns info on a specific project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return (required)
     * @param slug The slug of the project to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAsync(String author, String slug, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectValidateBeforeCall(author, slug, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMembers
     * @param author The author of the project to return members for (required)
     * @param slug The slug of the project to return members for (required)
     * @param pagination Pagination information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMembersCall(String author, String slug, RequestPagination pagination, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/members"
            .replaceAll("\\{" + "author" + "\\}", localVarApiClient.escapeString(author.toString()))
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMembersValidateBeforeCall(String author, String slug, RequestPagination pagination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling getProjectMembers(Async)");
        }
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getProjectMembers(Async)");
        }
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling getProjectMembers(Async)");
        }
        

        okhttp3.Call localVarCall = getProjectMembersCall(author, slug, pagination, _callback);
        return localVarCall;

    }

    /**
     * Returns the members of a project
     * Returns the members of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return members for (required)
     * @param slug The slug of the project to return members for (required)
     * @param pagination Pagination information (required)
     * @return PaginatedResultProjectMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultProjectMember getProjectMembers(String author, String slug, RequestPagination pagination) throws ApiException {
        ApiResponse<PaginatedResultProjectMember> localVarResp = getProjectMembersWithHttpInfo(author, slug, pagination);
        return localVarResp.getData();
    }

    /**
     * Returns the members of a project
     * Returns the members of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return members for (required)
     * @param slug The slug of the project to return members for (required)
     * @param pagination Pagination information (required)
     * @return ApiResponse&lt;PaginatedResultProjectMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultProjectMember> getProjectMembersWithHttpInfo(String author, String slug, RequestPagination pagination) throws ApiException {
        okhttp3.Call localVarCall = getProjectMembersValidateBeforeCall(author, slug, pagination, null);
        Type localVarReturnType = new TypeToken<PaginatedResultProjectMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the members of a project (asynchronously)
     * Returns the members of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return members for (required)
     * @param slug The slug of the project to return members for (required)
     * @param pagination Pagination information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMembersAsync(String author, String slug, RequestPagination pagination, final ApiCallback<PaginatedResultProjectMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMembersValidateBeforeCall(author, slug, pagination, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultProjectMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectStargazers
     * @param author The author of the project to return stargazers for (required)
     * @param slug The slug of the project to return stargazers for (required)
     * @param pagination Pagination information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectStargazersCall(String author, String slug, RequestPagination pagination, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/stargazers"
            .replaceAll("\\{" + "author" + "\\}", localVarApiClient.escapeString(author.toString()))
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectStargazersValidateBeforeCall(String author, String slug, RequestPagination pagination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling getProjectStargazers(Async)");
        }
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getProjectStargazers(Async)");
        }
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling getProjectStargazers(Async)");
        }
        

        okhttp3.Call localVarCall = getProjectStargazersCall(author, slug, pagination, _callback);
        return localVarCall;

    }

    /**
     * Returns the stargazers of a project
     * Returns the stargazers of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return stargazers for (required)
     * @param slug The slug of the project to return stargazers for (required)
     * @param pagination Pagination information (required)
     * @return PaginatedResultUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultUser getProjectStargazers(String author, String slug, RequestPagination pagination) throws ApiException {
        ApiResponse<PaginatedResultUser> localVarResp = getProjectStargazersWithHttpInfo(author, slug, pagination);
        return localVarResp.getData();
    }

    /**
     * Returns the stargazers of a project
     * Returns the stargazers of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return stargazers for (required)
     * @param slug The slug of the project to return stargazers for (required)
     * @param pagination Pagination information (required)
     * @return ApiResponse&lt;PaginatedResultUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultUser> getProjectStargazersWithHttpInfo(String author, String slug, RequestPagination pagination) throws ApiException {
        okhttp3.Call localVarCall = getProjectStargazersValidateBeforeCall(author, slug, pagination, null);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the stargazers of a project (asynchronously)
     * Returns the stargazers of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return stargazers for (required)
     * @param slug The slug of the project to return stargazers for (required)
     * @param pagination Pagination information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectStargazersAsync(String author, String slug, RequestPagination pagination, final ApiCallback<PaginatedResultUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectStargazersValidateBeforeCall(author, slug, pagination, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectWatchers
     * @param author The author of the project to return watchers for (required)
     * @param slug The slug of the project to return watchers for (required)
     * @param pagination Pagination information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectWatchersCall(String author, String slug, RequestPagination pagination, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/watchers"
            .replaceAll("\\{" + "author" + "\\}", localVarApiClient.escapeString(author.toString()))
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectWatchersValidateBeforeCall(String author, String slug, RequestPagination pagination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling getProjectWatchers(Async)");
        }
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getProjectWatchers(Async)");
        }
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling getProjectWatchers(Async)");
        }
        

        okhttp3.Call localVarCall = getProjectWatchersCall(author, slug, pagination, _callback);
        return localVarCall;

    }

    /**
     * Returns the watchers of a project
     * Returns the watchers of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return watchers for (required)
     * @param slug The slug of the project to return watchers for (required)
     * @param pagination Pagination information (required)
     * @return PaginatedResultUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultUser getProjectWatchers(String author, String slug, RequestPagination pagination) throws ApiException {
        ApiResponse<PaginatedResultUser> localVarResp = getProjectWatchersWithHttpInfo(author, slug, pagination);
        return localVarResp.getData();
    }

    /**
     * Returns the watchers of a project
     * Returns the watchers of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return watchers for (required)
     * @param slug The slug of the project to return watchers for (required)
     * @param pagination Pagination information (required)
     * @return ApiResponse&lt;PaginatedResultUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultUser> getProjectWatchersWithHttpInfo(String author, String slug, RequestPagination pagination) throws ApiException {
        okhttp3.Call localVarCall = getProjectWatchersValidateBeforeCall(author, slug, pagination, null);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the watchers of a project (asynchronously)
     * Returns the watchers of a project. Requires the &#x60;view_public_info&#x60; permission.
     * @param author The author of the project to return watchers for (required)
     * @param slug The slug of the project to return watchers for (required)
     * @param pagination Pagination information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectWatchersAsync(String author, String slug, RequestPagination pagination, final ApiCallback<PaginatedResultUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectWatchersValidateBeforeCall(author, slug, pagination, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjects
     * @param pagination Pagination information (required)
     * @param orderWithRelevance Whether projects should be sorted by the relevance to the given query (optional, default to true)
     * @param sort Used to sort the result (optional)
     * @param category A category to filter for (optional)
     * @param platform A platform to filter for (optional)
     * @param owner The author of the project (optional)
     * @param q The query to use when searching (optional)
     * @param license A license to filter for (optional)
     * @param version A Minecraft version to filter for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsCall(RequestPagination pagination, Boolean orderWithRelevance, String sort, String category, String platform, String owner, String q, String license, String version, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderWithRelevance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderWithRelevance", orderWithRelevance));
        }

        /*
        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }
         */
        if(pagination != null) {
            if(pagination.getLimit() != null) {
                localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", pagination.getLimit()));
            }
            if(pagination.getOffset() != null) {
                localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", pagination.getOffset()));
            }
        }


        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsValidateBeforeCall(RequestPagination pagination, Boolean orderWithRelevance, String sort, String category, String platform, String owner, String q, String license, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling getProjects(Async)");
        }
        

        okhttp3.Call localVarCall = getProjectsCall(pagination, orderWithRelevance, sort, category, platform, owner, q, license, version, _callback);
        return localVarCall;

    }

    /**
     * Searches the projects on Hangar
     * Searches all the projects on Hangar, or for a single user. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param orderWithRelevance Whether projects should be sorted by the relevance to the given query (optional, default to true)
     * @param sort Used to sort the result (optional)
     * @param category A category to filter for (optional)
     * @param platform A platform to filter for (optional)
     * @param owner The author of the project (optional)
     * @param q The query to use when searching (optional)
     * @param license A license to filter for (optional)
     * @param version A Minecraft version to filter for (optional)
     * @return PaginatedResultProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultProject getProjects(RequestPagination pagination, Boolean orderWithRelevance, String sort, String category, String platform, String owner, String q, String license, String version) throws ApiException {
        ApiResponse<PaginatedResultProject> localVarResp = getProjectsWithHttpInfo(pagination, orderWithRelevance, sort, category, platform, owner, q, license, version);
        return localVarResp.getData();
    }

    /**
     * Searches the projects on Hangar
     * Searches all the projects on Hangar, or for a single user. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param orderWithRelevance Whether projects should be sorted by the relevance to the given query (optional, default to true)
     * @param sort Used to sort the result (optional)
     * @param category A category to filter for (optional)
     * @param platform A platform to filter for (optional)
     * @param owner The author of the project (optional)
     * @param q The query to use when searching (optional)
     * @param license A license to filter for (optional)
     * @param version A Minecraft version to filter for (optional)
     * @return ApiResponse&lt;PaginatedResultProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultProject> getProjectsWithHttpInfo(RequestPagination pagination, Boolean orderWithRelevance, String sort, String category, String platform, String owner, String q, String license, String version) throws ApiException {
        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(pagination, orderWithRelevance, sort, category, platform, owner, q, license, version, null);
        Type localVarReturnType = new TypeToken<PaginatedResultProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches the projects on Hangar (asynchronously)
     * Searches all the projects on Hangar, or for a single user. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param orderWithRelevance Whether projects should be sorted by the relevance to the given query (optional, default to true)
     * @param sort Used to sort the result (optional)
     * @param category A category to filter for (optional)
     * @param platform A platform to filter for (optional)
     * @param owner The author of the project (optional)
     * @param q The query to use when searching (optional)
     * @param license A license to filter for (optional)
     * @param version A Minecraft version to filter for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsAsync(RequestPagination pagination, Boolean orderWithRelevance, String sort, String category, String platform, String owner, String q, String license, String version, final ApiCallback<PaginatedResultProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(pagination, orderWithRelevance, sort, category, platform, owner, q, license, version, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showProjectStats
     * @param author The author of the project to return stats for (required)
     * @param slug The slug of the project to return stats for (required)
     * @param fromDate The first date to include in the result (required)
     * @param toDate The last date to include in the result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showProjectStatsCall(String author, String slug, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/stats"
            .replaceAll("\\{" + "author" + "\\}", localVarApiClient.escapeString(author.toString()))
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showProjectStatsValidateBeforeCall(String author, String slug, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling showProjectStats(Async)");
        }
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling showProjectStats(Async)");
        }
        
        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling showProjectStats(Async)");
        }
        
        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling showProjectStats(Async)");
        }
        

        okhttp3.Call localVarCall = showProjectStatsCall(author, slug, fromDate, toDate, _callback);
        return localVarCall;

    }

    /**
     * Returns the stats for a project
     * Returns the stats (downloads and views) for a project per day for a certain date range. Requires the &#x60;is_subject_member&#x60; permission.
     * @param author The author of the project to return stats for (required)
     * @param slug The slug of the project to return stats for (required)
     * @param fromDate The first date to include in the result (required)
     * @param toDate The last date to include in the result (required)
     * @return Map&lt;String, DayProjectStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, DayProjectStats> showProjectStats(String author, String slug, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        ApiResponse<Map<String, DayProjectStats>> localVarResp = showProjectStatsWithHttpInfo(author, slug, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * Returns the stats for a project
     * Returns the stats (downloads and views) for a project per day for a certain date range. Requires the &#x60;is_subject_member&#x60; permission.
     * @param author The author of the project to return stats for (required)
     * @param slug The slug of the project to return stats for (required)
     * @param fromDate The first date to include in the result (required)
     * @param toDate The last date to include in the result (required)
     * @return ApiResponse&lt;Map&lt;String, DayProjectStats&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, DayProjectStats>> showProjectStatsWithHttpInfo(String author, String slug, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        okhttp3.Call localVarCall = showProjectStatsValidateBeforeCall(author, slug, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<Map<String, DayProjectStats>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the stats for a project (asynchronously)
     * Returns the stats (downloads and views) for a project per day for a certain date range. Requires the &#x60;is_subject_member&#x60; permission.
     * @param author The author of the project to return stats for (required)
     * @param slug The slug of the project to return stats for (required)
     * @param fromDate The first date to include in the result (required)
     * @param toDate The last date to include in the result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showProjectStatsAsync(String author, String slug, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback<Map<String, DayProjectStats>> _callback) throws ApiException {

        okhttp3.Call localVarCall = showProjectStatsValidateBeforeCall(author, slug, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<Map<String, DayProjectStats>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
