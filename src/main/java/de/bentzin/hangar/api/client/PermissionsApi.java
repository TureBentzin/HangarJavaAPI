/*
 * Hangar API
 * This page describes the format for the current Hangar REST API as well as general usage guidelines.<br> Note that all routes **not** listed here should be considered **internal**, and can change at a moment's notice. **Do not use them**.  ## Authentication and Authorization There are two ways to consume the API: Authenticated or anonymous.  ### Anonymous When using anonymous authentication, you only have access to public information, but you don't need to worry about creating and storing an API key or handing JWTs.  ### Authenticated If you need access to non-public content or actions, you need to create and use API keys. These can be created by going to the API keys page via the profile dropdown or by going to your user page and clicking on the key icon.  API keys allow you to impersonate yourself, so they should be handled like passwords. **Do not share them with anyone else!**  #### Getting and Using a JWT Once you have an API key, you need to authenticate yourself: Send a `POST` request with your API key identifier to `/api/v1/authenticate?apiKey=yourKey`. The response will contain your JWT as well as an expiration time. Put this JWT into the `Authorization` header of every request and make sure to request a new JWT after the expiration time has passed.  Please also set a meaningful `User-Agent` header. This allows us to better identify loads and needs for potentially new endpoints.  ## Misc ### Date Formats Standard ISO types. Where possible, we use the [OpenAPI format modifier](https://swagger.io/docs/specification/data-models/data-types/#format).  ### Rate Limits and Caching The default rate limit is set at 20 requests every 5 seconds with an initial overdraft for extra leniency. Individual endpoints, such as version creation, may have stricter rate limiting.  If applicable, always cache responses. The Hangar API itself is cached by CloudFlare and internally.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bentzin.hangar.api.client;

import com.google.gson.reflect.TypeToken;
import de.bentzin.hangar.api.*;
import de.bentzin.hangar.api.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PermissionsApi {
    private ApiClient localVarApiClient;

    public PermissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for hasAll
     * @param permissions The permissions to check (required)
     * @param author The owner of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param slug The project slug of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hasAllCall(List<NamedPermission> permissions, String author, String slug, String organization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/permissions/hasAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (permissions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "permissions", permissions));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hasAllValidateBeforeCall(List<NamedPermission> permissions, String author, String slug, String organization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling hasAll(Async)");
        }
        

        okhttp3.Call localVarCall = hasAllCall(permissions, author, slug, organization, _callback);
        return localVarCall;

    }

    /**
     * Checks whether you have all the provided permissions
     * Checks whether you have all the provided permissions in the given context
     * @param permissions The permissions to check (required)
     * @param author The owner of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param slug The project slug of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @return PermissionCheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PermissionCheck hasAll(List<NamedPermission> permissions, String author, String slug, String organization) throws ApiException {
        ApiResponse<PermissionCheck> localVarResp = hasAllWithHttpInfo(permissions, author, slug, organization);
        return localVarResp.getData();
    }

    /**
     * Checks whether you have all the provided permissions
     * Checks whether you have all the provided permissions in the given context
     * @param permissions The permissions to check (required)
     * @param author The owner of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param slug The project slug of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @return ApiResponse&lt;PermissionCheck&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionCheck> hasAllWithHttpInfo(List<NamedPermission> permissions, String author, String slug, String organization) throws ApiException {
        okhttp3.Call localVarCall = hasAllValidateBeforeCall(permissions, author, slug, organization, null);
        Type localVarReturnType = new TypeToken<PermissionCheck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks whether you have all the provided permissions (asynchronously)
     * Checks whether you have all the provided permissions in the given context
     * @param permissions The permissions to check (required)
     * @param author The owner of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param slug The project slug of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hasAllAsync(List<NamedPermission> permissions, String author, String slug, String organization, final ApiCallback<PermissionCheck> _callback) throws ApiException {

        okhttp3.Call localVarCall = hasAllValidateBeforeCall(permissions, author, slug, organization, _callback);
        Type localVarReturnType = new TypeToken<PermissionCheck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hasAny
     * @param permissions The permissions to check (required)
     * @param author The owner of the project to check permissions in. Must not be used together with &#x60;organizationName (optional)
     * @param slug The slug of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hasAnyCall(List<NamedPermission> permissions, String author, String slug, String organization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/permissions/hasAny";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (permissions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "permissions", permissions));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hasAnyValidateBeforeCall(List<NamedPermission> permissions, String author, String slug, String organization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling hasAny(Async)");
        }
        

        okhttp3.Call localVarCall = hasAnyCall(permissions, author, slug, organization, _callback);
        return localVarCall;

    }

    /**
     * Checks whether you have at least one of the provided permissions
     * Checks whether you have at least one of the provided permissions in the given context
     * @param permissions The permissions to check (required)
     * @param author The owner of the project to check permissions in. Must not be used together with &#x60;organizationName (optional)
     * @param slug The slug of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @return PermissionCheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PermissionCheck hasAny(List<NamedPermission> permissions, String author, String slug, String organization) throws ApiException {
        ApiResponse<PermissionCheck> localVarResp = hasAnyWithHttpInfo(permissions, author, slug, organization);
        return localVarResp.getData();
    }

    /**
     * Checks whether you have at least one of the provided permissions
     * Checks whether you have at least one of the provided permissions in the given context
     * @param permissions The permissions to check (required)
     * @param author The owner of the project to check permissions in. Must not be used together with &#x60;organizationName (optional)
     * @param slug The slug of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @return ApiResponse&lt;PermissionCheck&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionCheck> hasAnyWithHttpInfo(List<NamedPermission> permissions, String author, String slug, String organization) throws ApiException {
        okhttp3.Call localVarCall = hasAnyValidateBeforeCall(permissions, author, slug, organization, null);
        Type localVarReturnType = new TypeToken<PermissionCheck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks whether you have at least one of the provided permissions (asynchronously)
     * Checks whether you have at least one of the provided permissions in the given context
     * @param permissions The permissions to check (required)
     * @param author The owner of the project to check permissions in. Must not be used together with &#x60;organizationName (optional)
     * @param slug The slug of the project to check permissions in. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hasAnyAsync(List<NamedPermission> permissions, String author, String slug, String organization, final ApiCallback<PermissionCheck> _callback) throws ApiException {

        okhttp3.Call localVarCall = hasAnyValidateBeforeCall(permissions, author, slug, organization, _callback);
        Type localVarReturnType = new TypeToken<PermissionCheck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showPermissions
     * @param author The owner of the project to get the permissions for. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param slug The slug of the project get the permissions for. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showPermissionsCall(String author, String slug, String organization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showPermissionsValidateBeforeCall(String author, String slug, String organization, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = showPermissionsCall(author, slug, organization, _callback);
        return localVarCall;

    }

    /**
     * Returns your permissions
     * Returns a list of permissions you have in the given context
     * @param author The owner of the project to get the permissions for. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param slug The slug of the project get the permissions for. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @return UserPermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UserPermissions showPermissions(String author, String slug, String organization) throws ApiException {
        ApiResponse<UserPermissions> localVarResp = showPermissionsWithHttpInfo(author, slug, organization);
        return localVarResp.getData();
    }

    /**
     * Returns your permissions
     * Returns a list of permissions you have in the given context
     * @param author The owner of the project to get the permissions for. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param slug The slug of the project get the permissions for. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @return ApiResponse&lt;UserPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserPermissions> showPermissionsWithHttpInfo(String author, String slug, String organization) throws ApiException {
        okhttp3.Call localVarCall = showPermissionsValidateBeforeCall(author, slug, organization, null);
        Type localVarReturnType = new TypeToken<UserPermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns your permissions (asynchronously)
     * Returns a list of permissions you have in the given context
     * @param author The owner of the project to get the permissions for. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param slug The slug of the project get the permissions for. Must not be used together with &#x60;organizationName&#x60; (optional)
     * @param organization The organization to check permissions in. Must not be used together with &#x60;projectOwner&#x60; and &#x60;projectSlug&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showPermissionsAsync(String author, String slug, String organization, final ApiCallback<UserPermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = showPermissionsValidateBeforeCall(author, slug, organization, _callback);
        Type localVarReturnType = new TypeToken<UserPermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
