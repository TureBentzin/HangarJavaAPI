/*
 * Hangar API
 * This page describes the format for the current Hangar REST API as well as general usage guidelines.<br> Note that all routes **not** listed here should be considered **internal**, and can change at a moment's notice. **Do not use them**.  ## Authentication and Authorization There are two ways to consume the API: Authenticated or anonymous.  ### Anonymous When using anonymous authentication, you only have access to public information, but you don't need to worry about creating and storing an API key or handing JWTs.  ### Authenticated If you need access to non-public content or actions, you need to create and use API keys. These can be created by going to the API keys page via the profile dropdown or by going to your user page and clicking on the key icon.  API keys allow you to impersonate yourself, so they should be handled like passwords. **Do not share them with anyone else!**  #### Getting and Using a JWT Once you have an API key, you need to authenticate yourself: Send a `POST` request with your API key identifier to `/api/v1/authenticate?apiKey=yourKey`. The response will contain your JWT as well as an expiration time. Put this JWT into the `Authorization` header of every request and make sure to request a new JWT after the expiration time has passed.  Please also set a meaningful `User-Agent` header. This allows us to better identify loads and needs for potentially new endpoints.  ## Misc ### Date Formats Standard ISO types. Where possible, we use the [OpenAPI format modifier](https://swagger.io/docs/specification/data-models/data-types/#format).  ### Rate Limits and Caching The default rate limit is set at 20 requests every 5 seconds with an initial overdraft for extra leniency. Individual endpoints, such as version creation, may have stricter rate limiting.  If applicable, always cache responses. The Hangar API itself is cached by CloudFlare and internally.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bentzin.hangar.api.client.api;

import com.google.gson.reflect.TypeToken;
import de.bentzin.hangar.api.client.*;
import de.bentzin.hangar.api.client.model.*;

import java.io.File;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VersionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VersionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VersionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadVersion
     * @param author The author of the project to download the version from (required)
     * @param slug The slug of the project to download the version from (required)
     * @param name The name of the version to download (required)
     * @param platform The platform of the version to download (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Version has an external download url </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Version doesn&#39;t have a file attached to it </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVersionCall(String author, String slug, String name, Platform platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/versions/{name}/{platform}/download"
            .replace("{" + "author" + "}", localVarApiClient.escapeString(author.toString()))
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "platform" + "}", localVarApiClient.escapeString(platform.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadVersionValidateBeforeCall(String author, String slug, String name, Platform platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling downloadVersion(Async)");
        }

        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling downloadVersion(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadVersion(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling downloadVersion(Async)");
        }

        return downloadVersionCall(author, slug, name, platform, _callback);

    }

    /**
     * Downloads a version
     * Downloads the file for a specific platform of a version. Requires visibility of the project and version.
     * @param author The author of the project to download the version from (required)
     * @param slug The slug of the project to download the version from (required)
     * @param name The name of the version to download (required)
     * @param platform The platform of the version to download (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Version has an external download url </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Version doesn&#39;t have a file attached to it </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public File downloadVersion(String author, String slug, String name, Platform platform) throws ApiException {
        ApiResponse<File> localVarResp = downloadVersionWithHttpInfo(author, slug, name, platform);
        return localVarResp.getData();
    }

    /**
     * Downloads a version
     * Downloads the file for a specific platform of a version. Requires visibility of the project and version.
     * @param author The author of the project to download the version from (required)
     * @param slug The slug of the project to download the version from (required)
     * @param name The name of the version to download (required)
     * @param platform The platform of the version to download (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Version has an external download url </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Version doesn&#39;t have a file attached to it </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadVersionWithHttpInfo(String author, String slug, String name, Platform platform) throws ApiException {
        okhttp3.Call localVarCall = downloadVersionValidateBeforeCall(author, slug, name, platform, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downloads a version (asynchronously)
     * Downloads the file for a specific platform of a version. Requires visibility of the project and version.
     * @param author The author of the project to download the version from (required)
     * @param slug The slug of the project to download the version from (required)
     * @param name The name of the version to download (required)
     * @param platform The platform of the version to download (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 303 </td><td> Version has an external download url </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Version doesn&#39;t have a file attached to it </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVersionAsync(String author, String slug, String name, Platform platform, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadVersionValidateBeforeCall(author, slug, name, platform, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVersions
     * @param author The author of the project to return versions for (required)
     * @param slug The slug of the project to return versions for (required)
     * @param pagination Pagination information (required)
     * @param channel A name of a version channel to filter for (optional)
     * @param platform A platform name to filter for (optional)
     * @param vTag A version tag to filter for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVersionsCall(String author, String slug, RequestPagination pagination, String channel, String platform, String vTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/versions"
            .replace("{" + "author" + "}", localVarApiClient.escapeString(author.toString()))
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (vTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vTag", vTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVersionsValidateBeforeCall(String author, String slug, RequestPagination pagination, String channel, String platform, String vTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling listVersions(Async)");
        }

        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listVersions(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling listVersions(Async)");
        }

        return listVersionsCall(author, slug, pagination, channel, platform, vTag, _callback);

    }

    /**
     * Returns all versions of a project
     * Returns all versions of a project. Requires the &#x60;view_public_info&#x60; permission in the project or owning organization.
     * @param author The author of the project to return versions for (required)
     * @param slug The slug of the project to return versions for (required)
     * @param pagination Pagination information (required)
     * @param channel A name of a version channel to filter for (optional)
     * @param platform A platform name to filter for (optional)
     * @param vTag A version tag to filter for (optional)
     * @return PaginatedResultVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultVersion listVersions(String author, String slug, RequestPagination pagination, String channel, String platform, String vTag) throws ApiException {
        ApiResponse<PaginatedResultVersion> localVarResp = listVersionsWithHttpInfo(author, slug, pagination, channel, platform, vTag);
        return localVarResp.getData();
    }

    /**
     * Returns all versions of a project
     * Returns all versions of a project. Requires the &#x60;view_public_info&#x60; permission in the project or owning organization.
     * @param author The author of the project to return versions for (required)
     * @param slug The slug of the project to return versions for (required)
     * @param pagination Pagination information (required)
     * @param channel A name of a version channel to filter for (optional)
     * @param platform A platform name to filter for (optional)
     * @param vTag A version tag to filter for (optional)
     * @return ApiResponse&lt;PaginatedResultVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultVersion> listVersionsWithHttpInfo(String author, String slug, RequestPagination pagination, String channel, String platform, String vTag) throws ApiException {
        okhttp3.Call localVarCall = listVersionsValidateBeforeCall(author, slug, pagination, channel, platform, vTag, null);
        Type localVarReturnType = new TypeToken<PaginatedResultVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all versions of a project (asynchronously)
     * Returns all versions of a project. Requires the &#x60;view_public_info&#x60; permission in the project or owning organization.
     * @param author The author of the project to return versions for (required)
     * @param slug The slug of the project to return versions for (required)
     * @param pagination Pagination information (required)
     * @param channel A name of a version channel to filter for (optional)
     * @param platform A platform name to filter for (optional)
     * @param vTag A version tag to filter for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVersionsAsync(String author, String slug, RequestPagination pagination, String channel, String platform, String vTag, final ApiCallback<PaginatedResultVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVersionsValidateBeforeCall(author, slug, pagination, channel, platform, vTag, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showVersion
     * @param author The author of the project to return the version for (required)
     * @param slug The slug of the project to return the version for (required)
     * @param name The name of the version to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showVersionCall(String author, String slug, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/versions/{name}"
            .replace("{" + "author" + "}", localVarApiClient.escapeString(author.toString()))
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showVersionValidateBeforeCall(String author, String slug, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling showVersion(Async)");
        }

        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling showVersion(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling showVersion(Async)");
        }

        return showVersionCall(author, slug, name, _callback);

    }

    /**
     * Returns a specific version of a project
     * Returns a specific version of a project. Requires the &#x60;view_public_info&#x60; permission in the project or owning organization.
     * @param author The author of the project to return the version for (required)
     * @param slug The slug of the project to return the version for (required)
     * @param name The name of the version to return (required)
     * @return Version
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public Version showVersion(String author, String slug, String name) throws ApiException {
        ApiResponse<Version> localVarResp = showVersionWithHttpInfo(author, slug, name);
        return localVarResp.getData();
    }

    /**
     * Returns a specific version of a project
     * Returns a specific version of a project. Requires the &#x60;view_public_info&#x60; permission in the project or owning organization.
     * @param author The author of the project to return the version for (required)
     * @param slug The slug of the project to return the version for (required)
     * @param name The name of the version to return (required)
     * @return ApiResponse&lt;Version&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Version> showVersionWithHttpInfo(String author, String slug, String name) throws ApiException {
        okhttp3.Call localVarCall = showVersionValidateBeforeCall(author, slug, name, null);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a specific version of a project (asynchronously)
     * Returns a specific version of a project. Requires the &#x60;view_public_info&#x60; permission in the project or owning organization.
     * @param author The author of the project to return the version for (required)
     * @param slug The slug of the project to return the version for (required)
     * @param name The name of the version to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showVersionAsync(String author, String slug, String name, final ApiCallback<Version> _callback) throws ApiException {

        okhttp3.Call localVarCall = showVersionValidateBeforeCall(author, slug, name, _callback);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showVersionStats
     * @param author The author of the version to return the stats for (required)
     * @param slug The slug of the project to return stats for (required)
     * @param name The version to return the stats for (required)
     * @param platform The platform of the version to return stats for (required)
     * @param fromDate The first date to include in the result (required)
     * @param toDate The last date to include in the result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showVersionStatsCall(String author, String slug, String name, Platform platform, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/versions/{name}/{platform}/stats"
            .replace("{" + "author" + "}", localVarApiClient.escapeString(author.toString()))
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "platform" + "}", localVarApiClient.escapeString(platform.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showVersionStatsValidateBeforeCall(String author, String slug, String name, Platform platform, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling showVersionStats(Async)");
        }

        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling showVersionStats(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling showVersionStats(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling showVersionStats(Async)");
        }

        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling showVersionStats(Async)");
        }

        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling showVersionStats(Async)");
        }

        return showVersionStatsCall(author, slug, name, platform, fromDate, toDate, _callback);

    }

    /**
     * Returns the stats for a version
     * Returns the stats (downloads) for a version per day for a certain date range. Requires the &#x60;is_subject_member&#x60; permission.
     * @param author The author of the version to return the stats for (required)
     * @param slug The slug of the project to return stats for (required)
     * @param name The version to return the stats for (required)
     * @param platform The platform of the version to return stats for (required)
     * @param fromDate The first date to include in the result (required)
     * @param toDate The last date to include in the result (required)
     * @return Map&lt;String, VersionStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, VersionStats> showVersionStats(String author, String slug, String name, Platform platform, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        ApiResponse<Map<String, VersionStats>> localVarResp = showVersionStatsWithHttpInfo(author, slug, name, platform, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * Returns the stats for a version
     * Returns the stats (downloads) for a version per day for a certain date range. Requires the &#x60;is_subject_member&#x60; permission.
     * @param author The author of the version to return the stats for (required)
     * @param slug The slug of the project to return stats for (required)
     * @param name The version to return the stats for (required)
     * @param platform The platform of the version to return stats for (required)
     * @param fromDate The first date to include in the result (required)
     * @param toDate The last date to include in the result (required)
     * @return ApiResponse&lt;Map&lt;String, VersionStats&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, VersionStats>> showVersionStatsWithHttpInfo(String author, String slug, String name, Platform platform, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        okhttp3.Call localVarCall = showVersionStatsValidateBeforeCall(author, slug, name, platform, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<Map<String, VersionStats>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the stats for a version (asynchronously)
     * Returns the stats (downloads) for a version per day for a certain date range. Requires the &#x60;is_subject_member&#x60; permission.
     * @param author The author of the version to return the stats for (required)
     * @param slug The slug of the project to return stats for (required)
     * @param name The version to return the stats for (required)
     * @param platform The platform of the version to return stats for (required)
     * @param fromDate The first date to include in the result (required)
     * @param toDate The last date to include in the result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showVersionStatsAsync(String author, String slug, String name, Platform platform, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback<Map<String, VersionStats>> _callback) throws ApiException {

        okhttp3.Call localVarCall = showVersionStatsValidateBeforeCall(author, slug, name, platform, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<Map<String, VersionStats>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadVersion
     * @param author The author of the project to return versions for (required)
     * @param slug The slug of the project to return versions for (required)
     * @param versionUpload  (required)
     * @param files The version files in order of selected platforms, if any (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadVersionCall(String author, String slug, VersionUpload versionUpload, List<File> files, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/projects/{author}/{slug}/upload"
            .replace("{" + "author" + "}", localVarApiClient.escapeString(author))
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (versionUpload != null) {
            localVarFormParams.put("versionUpload", versionUpload);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadVersionValidateBeforeCall(String author, String slug, VersionUpload versionUpload, List<File> files, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'author' is set
        if (author == null) {
            throw new ApiException("Missing the required parameter 'author' when calling uploadVersion(Async)");
        }

        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling uploadVersion(Async)");
        }

        // verify the required parameter 'versionUpload' is set
        if (versionUpload == null) {
            throw new ApiException("Missing the required parameter 'versionUpload' when calling uploadVersion(Async)");
        }

        return uploadVersionCall(author, slug, versionUpload, files, _callback);

    }

    /**
     * Creates a new version
     * Creates a new version for a project. Requires the &#x60;create_version&#x60; permission in the project or owning organization.
     * @param author The author of the project to return versions for (required)
     * @param slug The slug of the project to return versions for (required)
     * @param versionUpload  (required)
     * @param files The version files in order of selected platforms, if any (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public void uploadVersion(String author, String slug, VersionUpload versionUpload, List<File> files) throws ApiException {
        uploadVersionWithHttpInfo(author, slug, versionUpload, files);
    }

    /**
     * Creates a new version
     * Creates a new version for a project. Requires the &#x60;create_version&#x60; permission in the project or owning organization.
     * @param author The author of the project to return versions for (required)
     * @param slug The slug of the project to return versions for (required)
     * @param versionUpload  (required)
     * @param files The version files in order of selected platforms, if any (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadVersionWithHttpInfo(String author, String slug, VersionUpload versionUpload, List<File> files) throws ApiException {
        okhttp3.Call localVarCall = uploadVersionValidateBeforeCall(author, slug, versionUpload, files, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new version (asynchronously)
     * Creates a new version for a project. Requires the &#x60;create_version&#x60; permission in the project or owning organization.
     * @param author The author of the project to return versions for (required)
     * @param slug The slug of the project to return versions for (required)
     * @param versionUpload  (required)
     * @param files The version files in order of selected platforms, if any (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadVersionAsync(String author, String slug, VersionUpload versionUpload, List<File> files, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadVersionValidateBeforeCall(author, slug, versionUpload, files, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
