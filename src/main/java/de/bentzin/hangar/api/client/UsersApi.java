/*
 * Hangar API
 * This page describes the format for the current Hangar REST API as well as general usage guidelines.<br> Note that all routes **not** listed here should be considered **internal**, and can change at a moment's notice. **Do not use them**.  ## Authentication and Authorization There are two ways to consume the API: Authenticated or anonymous.  ### Anonymous When using anonymous authentication, you only have access to public information, but you don't need to worry about creating and storing an API key or handing JWTs.  ### Authenticated If you need access to non-public content or actions, you need to create and use API keys. These can be created by going to the API keys page via the profile dropdown or by going to your user page and clicking on the key icon.  API keys allow you to impersonate yourself, so they should be handled like passwords. **Do not share them with anyone else!**  #### Getting and Using a JWT Once you have an API key, you need to authenticate yourself: Send a `POST` request with your API key identifier to `/api/v1/authenticate?apiKey=yourKey`. The response will contain your JWT as well as an expiration time. Put this JWT into the `Authorization` header of every request and make sure to request a new JWT after the expiration time has passed.  Please also set a meaningful `User-Agent` header. This allows us to better identify loads and needs for potentially new endpoints.  ## Misc ### Date Formats Standard ISO types. Where possible, we use the [OpenAPI format modifier](https://swagger.io/docs/specification/data-models/data-types/#format).  ### Rate Limits and Caching The default rate limit is set at 20 requests every 5 seconds with an initial overdraft for extra leniency. Individual endpoints, such as version creation, may have stricter rate limiting.  If applicable, always cache responses. The Hangar API itself is cached by CloudFlare and internally.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.bentzin.hangar.api.client;

import com.google.gson.reflect.TypeToken;
import de.bentzin.hangar.api.*;
import de.bentzin.hangar.api.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAuthors
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorsCall(RequestPagination pagination, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/authors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorsValidateBeforeCall(RequestPagination pagination, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling getAuthors(Async)");
        }
        

        okhttp3.Call localVarCall = getAuthorsCall(pagination, sort, _callback);
        return localVarCall;

    }

    /**
     * Returns all users with at least one public project
     * Returns all users that have at least one public project. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @return PaginatedResultUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultUser getAuthors(RequestPagination pagination, String sort) throws ApiException {
        ApiResponse<PaginatedResultUser> localVarResp = getAuthorsWithHttpInfo(pagination, sort);
        return localVarResp.getData();
    }

    /**
     * Returns all users with at least one public project
     * Returns all users that have at least one public project. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @return ApiResponse&lt;PaginatedResultUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultUser> getAuthorsWithHttpInfo(RequestPagination pagination, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAuthorsValidateBeforeCall(pagination, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all users with at least one public project (asynchronously)
     * Returns all users that have at least one public project. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorsAsync(RequestPagination pagination, String sort, final ApiCallback<PaginatedResultUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorsValidateBeforeCall(pagination, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStaff
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStaffCall(RequestPagination pagination, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/staff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStaffValidateBeforeCall(RequestPagination pagination, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling getStaff(Async)");
        }
        

        okhttp3.Call localVarCall = getStaffCall(pagination, sort, _callback);
        return localVarCall;

    }

    /**
     * Returns Hangar staff
     * Returns Hanagr staff. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @return PaginatedResultUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultUser getStaff(RequestPagination pagination, String sort) throws ApiException {
        ApiResponse<PaginatedResultUser> localVarResp = getStaffWithHttpInfo(pagination, sort);
        return localVarResp.getData();
    }

    /**
     * Returns Hangar staff
     * Returns Hanagr staff. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @return ApiResponse&lt;PaginatedResultUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultUser> getStaffWithHttpInfo(RequestPagination pagination, String sort) throws ApiException {
        okhttp3.Call localVarCall = getStaffValidateBeforeCall(pagination, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns Hangar staff (asynchronously)
     * Returns Hanagr staff. Requires the &#x60;view_public_info&#x60; permission.
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStaffAsync(RequestPagination pagination, String sort, final ApiCallback<PaginatedResultUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStaffValidateBeforeCall(pagination, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param user The name of the user to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{user}"
            .replaceAll("\\{" + "user" + "\\}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling getUser(Async)");
        }
        

        okhttp3.Call localVarCall = getUserCall(user, _callback);
        return localVarCall;

    }

    /**
     * Returns a specific user
     * Returns a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The name of the user to return (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(String user) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * Returns a specific user
     * Returns a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The name of the user to return (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a specific user (asynchronously)
     * Returns a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The name of the user to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPinnedProjects
     * @param user The user to return pinned projects for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPinnedProjectsCall(String user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{user}/pinned"
            .replaceAll("\\{" + "user" + "\\}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPinnedProjectsValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling getUserPinnedProjects(Async)");
        }
        

        okhttp3.Call localVarCall = getUserPinnedProjectsCall(user, _callback);
        return localVarCall;

    }

    /**
     * Returns the pinned projects for a specific user
     * Returns the pinned projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return pinned projects for (required)
     * @return List&lt;ProjectCompact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectCompact> getUserPinnedProjects(String user) throws ApiException {
        ApiResponse<List<ProjectCompact>> localVarResp = getUserPinnedProjectsWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * Returns the pinned projects for a specific user
     * Returns the pinned projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return pinned projects for (required)
     * @return ApiResponse&lt;List&lt;ProjectCompact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectCompact>> getUserPinnedProjectsWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = getUserPinnedProjectsValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<List<ProjectCompact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the pinned projects for a specific user (asynchronously)
     * Returns the pinned projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return pinned projects for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPinnedProjectsAsync(String user, final ApiCallback<List<ProjectCompact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPinnedProjectsValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectCompact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserWatching
     * @param user The user to return watched projects for (required)
     * @param pagination Pagination information (required)
     * @param sort How to sort the projects (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserWatchingCall(String user, RequestPagination pagination, ProjectSortingStrategy sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{user}/watching"
            .replaceAll("\\{" + "user" + "\\}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserWatchingValidateBeforeCall(String user, RequestPagination pagination, ProjectSortingStrategy sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling getUserWatching(Async)");
        }
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling getUserWatching(Async)");
        }
        

        okhttp3.Call localVarCall = getUserWatchingCall(user, pagination, sort, _callback);
        return localVarCall;

    }

    /**
     * Returns the watched projects for a specific user
     * Returns the watched projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return watched projects for (required)
     * @param pagination Pagination information (required)
     * @param sort How to sort the projects (optional)
     * @return PaginatedResultProjectCompact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultProjectCompact getUserWatching(String user, RequestPagination pagination, ProjectSortingStrategy sort) throws ApiException {
        ApiResponse<PaginatedResultProjectCompact> localVarResp = getUserWatchingWithHttpInfo(user, pagination, sort);
        return localVarResp.getData();
    }

    /**
     * Returns the watched projects for a specific user
     * Returns the watched projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return watched projects for (required)
     * @param pagination Pagination information (required)
     * @param sort How to sort the projects (optional)
     * @return ApiResponse&lt;PaginatedResultProjectCompact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultProjectCompact> getUserWatchingWithHttpInfo(String user, RequestPagination pagination, ProjectSortingStrategy sort) throws ApiException {
        okhttp3.Call localVarCall = getUserWatchingValidateBeforeCall(user, pagination, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedResultProjectCompact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the watched projects for a specific user (asynchronously)
     * Returns the watched projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return watched projects for (required)
     * @param pagination Pagination information (required)
     * @param sort How to sort the projects (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserWatchingAsync(String user, RequestPagination pagination, ProjectSortingStrategy sort, final ApiCallback<PaginatedResultProjectCompact> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserWatchingValidateBeforeCall(user, pagination, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultProjectCompact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showStarred
     * @param user The user to return starred projects for (required)
     * @param pagination Pagination information (required)
     * @param sort How to sort the projects (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStarredCall(String user, RequestPagination pagination, ProjectSortingStrategy sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users/{user}/starred"
            .replaceAll("\\{" + "user" + "\\}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showStarredValidateBeforeCall(String user, RequestPagination pagination, ProjectSortingStrategy sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling showStarred(Async)");
        }
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling showStarred(Async)");
        }
        

        okhttp3.Call localVarCall = showStarredCall(user, pagination, sort, _callback);
        return localVarCall;

    }

    /**
     * Returns the starred projects for a specific user
     * Returns the starred projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return starred projects for (required)
     * @param pagination Pagination information (required)
     * @param sort How to sort the projects (optional)
     * @return PaginatedResultProjectCompact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultProjectCompact showStarred(String user, RequestPagination pagination, ProjectSortingStrategy sort) throws ApiException {
        ApiResponse<PaginatedResultProjectCompact> localVarResp = showStarredWithHttpInfo(user, pagination, sort);
        return localVarResp.getData();
    }

    /**
     * Returns the starred projects for a specific user
     * Returns the starred projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return starred projects for (required)
     * @param pagination Pagination information (required)
     * @param sort How to sort the projects (optional)
     * @return ApiResponse&lt;PaginatedResultProjectCompact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultProjectCompact> showStarredWithHttpInfo(String user, RequestPagination pagination, ProjectSortingStrategy sort) throws ApiException {
        okhttp3.Call localVarCall = showStarredValidateBeforeCall(user, pagination, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedResultProjectCompact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the starred projects for a specific user (asynchronously)
     * Returns the starred projects for a specific user. Requires the &#x60;view_public_info&#x60; permission.
     * @param user The user to return starred projects for (required)
     * @param pagination Pagination information (required)
     * @param sort How to sort the projects (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStarredAsync(String user, RequestPagination pagination, ProjectSortingStrategy sort, final ApiCallback<PaginatedResultProjectCompact> _callback) throws ApiException {

        okhttp3.Call localVarCall = showStarredValidateBeforeCall(user, pagination, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultProjectCompact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showUsers
     * @param query The search query (required)
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showUsersCall(String query, RequestPagination pagination, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HangarAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showUsersValidateBeforeCall(String query, RequestPagination pagination, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling showUsers(Async)");
        }
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling showUsers(Async)");
        }
        

        okhttp3.Call localVarCall = showUsersCall(query, pagination, sort, _callback);
        return localVarCall;

    }

    /**
     * Searches for users
     * Returns a list of users based on a search query. Requires the &#x60;view_public_info&#x60; permission.
     * @param query The search query (required)
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @return PaginatedResultUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultUser showUsers(String query, RequestPagination pagination, String sort) throws ApiException {
        ApiResponse<PaginatedResultUser> localVarResp = showUsersWithHttpInfo(query, pagination, sort);
        return localVarResp.getData();
    }

    /**
     * Searches for users
     * Returns a list of users based on a search query. Requires the &#x60;view_public_info&#x60; permission.
     * @param query The search query (required)
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @return ApiResponse&lt;PaginatedResultUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultUser> showUsersWithHttpInfo(String query, RequestPagination pagination, String sort) throws ApiException {
        okhttp3.Call localVarCall = showUsersValidateBeforeCall(query, pagination, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches for users (asynchronously)
     * Returns a list of users based on a search query. Requires the &#x60;view_public_info&#x60; permission.
     * @param query The search query (required)
     * @param pagination Pagination information (required)
     * @param sort Used to sort the result (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions to use this endpoint </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Api session missing, invalid or expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showUsersAsync(String query, RequestPagination pagination, String sort, final ApiCallback<PaginatedResultUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = showUsersValidateBeforeCall(query, pagination, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
